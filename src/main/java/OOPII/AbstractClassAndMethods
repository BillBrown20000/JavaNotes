n abstract class is a class that cannot be instantiated
(we cannot create objects of an abstract class).
If we try to create objects of an abstract class,
we will get a compilation error.

Though abstract classes cannot be instantiated, we can create subclasses from it.
We can create objects of subclasses to access members of the abstract class.

It's important to note that, only an abstract class can contain abstract methods.
However An abstract class can contain both abstract and non-abstract methods.

An abstract class cannot be instantiated.
To access the members of an abstract class, we must inherit it.

In Java, it is mandatory to override abstract methods of the superclass
in the subclass.
It is because the subclass inherits abstract methods of the superclass.

Abstraction is an important concept of object-oriented programming.
Abstraction only shows the needed information and all the unnecessary details
are kept hidden. This allows us to manage complexity by omitting or
hiding details with a simpler, higher-level idea.

A practical example of abstraction can be motorbike brakes.
We know what brake does. When we apply the brake, the motorbike will stop.
However, the mechanics behind the brake is kept hidden from us.

Key Points to Remember
We use the abstract keyword to create abstract classes and methods.

An abstract method doesn't have any implementation (method body).

A class containing abstract methods should also be abstract.

We cannot create objects of an abstract class.

To implement features of an abstract class, we inherit subclasses
from it and create objects of the subclass.

A subclass must override all abstract methods of an abstract class.
However, if the subclass is declared abstract, it's not mandatory to
override abstract methods.

We can access the static attributes and methods of an abstract
class using the reference of the abstract class.